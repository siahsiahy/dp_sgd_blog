<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://siahshiahy.github.io/dp_sgd_blog/feed.xml" rel="self" type="application/atom+xml"/><link href="https://siahshiahy.github.io/dp_sgd_blog/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-10-26T17:25:15+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Teaching AI to Whisper, Not Shout</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/distill-dp/" rel="alternate" type="text/html" title="Teaching AI to Whisper, Not Shout"/><published>2025-10-26T00:00:00+00:00</published><updated>2025-10-26T00:00:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2025/distill-dp</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/distill-dp/"><![CDATA[<h2 id="motivation">Motivation</h2> <p>Deep learning showed me how models can learn powerful patterns from massive amounts of data.<br/> But data privacy reminded me that these datasets often come from <strong>real people</strong> — each record a small fragment of someone’s life.</p> <p>That made me wonder:<br/> <em>Can we build models that learn, without exposing the people who taught them?</em></p> <p>This question led me to explore <strong>DP-SGD (Differentially Private Stochastic Gradient Descent)</strong> —<br/> an elegant training method that allows neural networks to <strong>learn responsibly</strong> —<br/> keeping the insights, but forgetting the identities.</p> <hr/> <p>Just like how attention helps models focus on <strong>important regions</strong> in an image,<br/> differential privacy helps models <strong>forget unnecessary details</strong> about individual samples.<br/> Take the two brains in Fig. 1 as an example.</p> <p><img src="/dp_sgd_blog/assets/img/dpsgd_brain.png" alt="DP-SGD Brain" width="400"/></p> <p><strong>Figure 1:</strong> A visual comparison between <strong>SGD</strong> and <strong>DP-SGD</strong>.<br/> The brain on the left (SGD) memorizes every tiny detail — faces, words, and data points — while the brain on the right (DP-SGD) only retains the general patterns after adding noise.<br/> This simple idea makes models <em>learn like humans — remembering what matters, and forgetting what doesn’t.</em></p> <hr/> <h2 id="why-whisper">Why Whisper?</h2> <p><em>Why should a neural network learn to whisper instead of shout?</em></p> <p>Modern deep learning thrives on <strong>data — lots of it.</strong><br/> The more data a model sees, the smarter it becomes.<br/> But there’s a catch: much of that data is <strong>personal</strong> — medical records, voice recordings, photos, chat logs.</p> <blockquote> <p>“The more a model learns, the more it remembers.”</p> </blockquote> <p>Imagine training a speech recognition system.<br/> It might not only learn to recognize words,<br/> but also <strong>remember the speaker’s voice</strong> so well<br/> that someone could later reconstruct what that person said.<br/> That’s not intelligence — that’s a privacy leak.</p> <h3 id="the-problem">The Problem</h3> <p>Deep neural networks have millions (or even billions) of parameters.<br/> These parameters don’t just learn <em>patterns</em> — they can memorize <em>examples</em>.<br/> Even without malicious intent, attackers can exploit this fact.</p> <p>Researchers have shown <strong>model inversion attacks</strong>,<br/> where adversaries, given access to a model’s outputs,<br/> can reconstruct sensitive parts of the training data —<br/> like recreating someone’s face from a classifier’s memory.</p> <p>In short:</p> <blockquote> <p>The bigger and more capable our models become,<br/> the more they risk revealing what they were trained on.</p> </blockquote> <h3 id="the-goal">The Goal</h3> <p>The main goal of this paper is to train deep learning models that can <strong>learn from data without revealing anyone’s secrets</strong>.</p> <p>The authors introduced <strong>DP-SGD</strong>, a clever twist on the classic SGD algorithm.<br/> It adds a bit of random noise during training, so the model learns general patterns — but forgets the fine details about any individual.</p> <p>That is to say, they wanted to prove that <strong>privacy and performance don’t have to be enemies</strong> —<br/> you can build smart models and keep people’s data safe at the same time.</p> <hr/> <h2 id="what-does-dp-sgd-actually-do">What Does DP-SGD Actually Do?</h2> <p>In deep learning, we usually train models with <strong>stochastic gradient descent (SGD)</strong>, letting them adjust their weights based on every tiny detail in the data.<br/> That’s great for accuracy — but sometimes the model <em>remembers too much</em>, even bits of someone’s private information.</p> <p>That’s where <strong>DP-SGD</strong> (Differentially Private Stochastic Gradient Descent) steps in.<br/> It takes the same learning process and adds a bit of mathematical “privacy dust.”</p> <hr/> <h3 id="the-math-behind-the-privacy">The Math Behind the Privacy</h3> <p>Under the hood, DP-SGD relies on the formal definition of <strong>differential privacy</strong>.<br/> A randomized mechanism $ \mathcal{M} : \mathcal{D} \to \mathcal{R} $ is said to satisfy<br/> $ (\varepsilon, \delta) $-differential privacy if, for any two adjacent datasets $ d, d’ \in \mathcal{D} $ and any subset of outputs $ S \subseteq \mathcal{R} $,</p> \[\Pr[\mathcal{M}(d) \in S] \le e^{\varepsilon} \Pr[\mathcal{M}(d') \in S] + \delta\] <p>This means that whether or not your data is included, the algorithm’s behavior doesn’t change much —<br/> no single individual can drastically affect the outcome.</p> <hr/> <h3 id="the-gaussian-mechanism">The Gaussian Mechanism</h3> <p>To achieve this, DP uses noise drawn from a Gaussian distribution:</p> \[\mathcal{M}(d) \triangleq f(d) + \mathcal{N}(0, S_f^2 \cdot \sigma^2)\] <p>where</p> <ul> <li>$ S_f $ is the <strong>sensitivity</strong> (the largest possible change in $ f $ when one data point changes), and</li> <li>$ \sigma $ controls the noise scale — larger $ \sigma $ means stronger privacy.</li> </ul> <p>DP-SGD effectively applies this mechanism at every training step, ensuring that each gradient update respects the same privacy guarantee.</p> <hr/> <p>So to me, DP-SGD is a way of teaching models to <strong>learn from the crowd, not from individuals</strong>. It keeps the essence of the data, but forgets who said what — which feels like a much more human way to learn.</p> <hr/> <h2 id="algorithm-making-sgd-private">Algorithm: Making SGD Private</h2> <p>Algorithm 1 outlines our basic method for training a model with parameters $\theta$ by minimizing the empirical loss function $\mathcal{L}(\theta)$.<br/> At each step of SGD, we compute the gradient $\nabla_\theta \mathcal{L}(\theta, x_i)$ for a random subset of examples, clip the ℓ₂ norm of each gradient, compute the average, add Gaussian noise to protect privacy, and take a step in the opposite direction of this average noisy gradient.<br/> At the end of training, we output the final model $\theta_T$ and compute the overall privacy cost $(\varepsilon, \delta)$ using a privacy accountant.</p> <hr/> <h3 id="algorithm-1-differentially-private-sgd-outline"><strong>Algorithm 1: Differentially Private SGD (Outline)</strong></h3> <p><strong>Input:</strong><br/> Examples ${x_1, \dots, x_N}$, loss function<br/> \(\mathcal{L}(\theta) = \frac{1}{N} \sum_i \mathcal{L}(\theta, x_i)\) Parameters: learning rate (\eta_t), noise scale (\sigma), group size (L), gradient norm bound (C).</p> <p><strong>Initialize</strong> $\theta_0$ randomly</p> <p><strong>for</strong> $t \in [T]$ <strong>do</strong><br/>     Take a random sample $L_t$ with sampling probability $L/N$<br/>     <strong>Compute gradient:</strong><br/> \(g_t(x_i) \leftarrow \nabla_\theta \mathcal{L}(\theta_t, x_i)\)</p> <p>    <strong>Clip gradient:</strong><br/> \(\bar{g}_t(x_i) \leftarrow g_t(x_i) / \max\Big(1, \frac{||g_t(x_i)||_2}{C}\Big)\)</p> <p>    <strong>Add noise:</strong><br/> \(\tilde{g}_t \leftarrow \frac{1}{L} \Big(\sum_i \bar{g}_t(x_i) + \mathcal{N}(0, \sigma^2 C^2 \mathbf{I})\Big)\)</p> <p>    <strong>Descent:</strong><br/> \(\theta_{t+1} \leftarrow \theta_t - \eta_t \tilde{g}_t\)</p> <p><strong>Output:</strong> $\theta_T$ and compute the overall privacy cost $(\varepsilon, \delta)$ using a privacy accounting method.</p> <hr/> <h3 id="the-moments-accountant-keeping-track-of-privacy">The Moments Accountant: Keeping Track of Privacy</h3> <p>The <strong>Moments Accountant</strong> keeps a tight bound on how much privacy loss has accumulated during training.<br/> It’s based on the idea that every noisy gradient update “spends” a small privacy cost —<br/> and this accountant tracks those costs precisely over all steps.</p> <p>The accountant defines a <em>privacy loss random variable</em> that compares how likely a given output is when training on two adjacent datasets (differing by one person’s data):</p> \[c(o; \mathcal{M}, d, d') = \log \frac{\Pr[\mathcal{M}(d) = o]}{\Pr[\mathcal{M}(d') = o]}\] <p>This measures how much the inclusion or exclusion of one example can influence the output.<br/> We then compute the <strong>log moments</strong> of this variable:</p> \[\alpha_{\mathcal{M}}(\lambda; d, d') = \log \mathbb{E}_{o \sim \mathcal{M}(d)} [\exp(\lambda c(o; \mathcal{M}, d, d'))]\] <p>and take the maximum over all possible pairs of neighboring datasets.<br/> These moments can then be converted into an overall privacy guarantee ((\varepsilon, \delta)).</p> <p>In short, the Moments Accountant works like a <strong>ledger</strong> — it records exactly how much privacy has been spent,<br/> ensuring that the final model doesn’t exceed the allowed budget.</p> <hr/> <h3 id="hyperparameter-tuning-balancing-privacy-and-accuracy">Hyperparameter Tuning: Balancing Privacy and Accuracy</h3> <p>In deep learning, tuning <strong>hyperparameters</strong> like batch size, noise level, and learning rate can dramatically affect both accuracy and privacy.<br/> Through experiments, the paper finds that model accuracy is more sensitive to these parameters than to network architecture itself.</p> <p>When we try multiple hyperparameter configurations, each run technically adds to the total privacy cost.<br/> However, using results from theory (e.g., Gupta et al.), we can control this accumulation and reuse information across runs more efficiently.</p> <p>Empirically, the best settings tend to be:</p> <ul> <li>Small to moderate <strong>batch sizes</strong> — too large a batch increases privacy loss.</li> <li>A relatively <strong>large learning rate</strong> at the beginning, which decays over time.</li> <li>Carefully chosen <strong>noise scale</strong> $\sigma$ to balance accuracy and privacy.</li> </ul> <hr/> <h3 id="thats-what-i-think">That’s What I Think</h3> <p>To me, this section is where the algorithm becomes “human.”<br/> DP-SGD isn’t just about math or bounds — it’s about <em>teaching a model to learn responsibly</em>.<br/> The gradient clipping feels like setting social boundaries, and the Gaussian noise is like gentle confusion that protects everyone’s secrets.</p> <p>The Moments Accountant then plays the role of a careful observer, making sure the learning process never crosses the line of privacy.<br/> And hyperparameter tuning is where art meets science — finding that sweet spot<br/> where the model learns <em>just enough</em> without remembering too much.</p> <p>Here is the lightweight implementation of the code.</p> <hr/> <h2 id="implementing-dp-sgd-where-theory-meets-tensorflow">Implementing DP-SGD: Where Theory Meets TensorFlow</h2> <p>We have implemented the differentially private SGD algorithms in Tensor Flow. The source code is available under an Apache 2.0 license from github.com/tensorflow/models. In practice, it works like this:</p> <ul> <li><strong>Sanitizer</strong> trims each sample’s gradient so no single datapoint can shout too loudly.</li> <li><strong>Accountant</strong> keeps track of the privacy “budget” — how much (ε, δ) you’ve spent so far.</li> <li><strong>Optimizer</strong> updates the model using a noisy, clipped gradient — learning from the crowd, not from individuals.</li> </ul> <hr/> <details> <summary><strong> Click to view full DP-SGD code (Python-like)</strong></summary> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
</pre></td><td class="code"><pre><span class="c1"># --- DP-SGD Optimizer, Sanitizer, and Accountant -----------------------------
</span>
<span class="k">class</span> <span class="nc">PrivacyAccountant</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Toy moments accountant for demonstration.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">eps_budget</span><span class="o">=</span><span class="mf">8.0</span><span class="p">,</span> <span class="n">delta</span><span class="o">=</span><span class="mf">1e-5</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">eps_budget</span> <span class="o">=</span> <span class="n">eps_budget</span>
        <span class="n">self</span><span class="p">.</span><span class="n">delta</span> <span class="o">=</span> <span class="n">delta</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_eps_spent</span> <span class="o">=</span> <span class="mf">0.0</span>

    <span class="k">def</span> <span class="nf">accumulate_privacy_spending</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">noise_sigma</span><span class="p">,</span> <span class="n">sampling_prob</span><span class="p">):</span>
        <span class="n">step_eps</span> <span class="o">=</span> <span class="n">sampling_prob</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="n">noise_sigma</span><span class="p">,</span> <span class="mf">1e-6</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_eps_spent</span> <span class="o">+=</span> <span class="n">step_eps</span>

    <span class="k">def</span> <span class="nf">get_spent_privacy</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_eps_spent</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delta</span>

    <span class="k">def</span> <span class="nf">within_limit</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_eps_spent</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">eps_budget</span>


<span class="k">class</span> <span class="nc">Sanitizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Clips per-example gradients and adds Gaussian noise.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">clipping_C</span><span class="p">,</span> <span class="n">noise_sigma</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">C</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">clipping_C</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sigma</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">noise_sigma</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_l2_norm</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">g</span><span class="p">):</span>
        <span class="nf">return </span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">g</span><span class="p">)</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">clip_per_example</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">per_example_grads</span><span class="p">):</span>
        <span class="n">clipped</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">per_example_grads</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_l2_norm</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">C</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="n">norm</span><span class="p">,</span> <span class="mf">1e-12</span><span class="p">))</span>
            <span class="n">clipped</span><span class="p">.</span><span class="nf">append</span><span class="p">([</span><span class="n">scale</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">g</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">clipped</span>

    <span class="k">def</span> <span class="nf">add_noise_to_batch_mean</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">clipped_grads</span><span class="p">):</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">clipped_grads</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">clipped_grads</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">mean_grad</span> <span class="o">=</span> <span class="p">[</span><span class="nf">sum</span><span class="p">(</span><span class="n">g</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">clipped_grads</span><span class="p">)</span> <span class="o">/</span> <span class="n">L</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">d</span><span class="p">)]</span>
        <span class="kn">import</span> <span class="n">random</span>
        <span class="n">noisy</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sigma</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">C</span><span class="p">)</span> <span class="o">*</span> <span class="n">random</span><span class="p">.</span><span class="nf">gauss</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mean_grad</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">noisy</span>


<span class="k">class</span> <span class="nc">DPSGDOptimizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Integrates Sanitizer and Accountant into a training step.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">accountant</span><span class="p">:</span> <span class="n">PrivacyAccountant</span><span class="p">,</span> <span class="n">sanitizer</span><span class="p">:</span> <span class="n">Sanitizer</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.05</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">accountant</span> <span class="o">=</span> <span class="n">accountant</span>
        <span class="n">self</span><span class="p">.</span><span class="n">sanitizer</span> <span class="o">=</span> <span class="n">sanitizer</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lr</span> <span class="o">=</span> <span class="n">lr</span>

    <span class="k">def</span> <span class="nf">per_example_gradients</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">loss_fn</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">batch</span><span class="p">):</span>
        <span class="n">grads</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">eps</span> <span class="o">=</span> <span class="mf">1e-4</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">batch</span><span class="p">:</span>
            <span class="n">base</span> <span class="o">=</span> <span class="nf">loss_fn</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
            <span class="n">g</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">params</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">params</span><span class="p">)):</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">params</span><span class="p">[:]</span>
                <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">eps</span>
                <span class="n">g</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nf">loss_fn</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">base</span><span class="p">)</span> <span class="o">/</span> <span class="n">eps</span>
            <span class="n">grads</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">grads</span>

    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">loss_fn</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">sampling_prob</span><span class="p">):</span>
        <span class="n">per_ex_grads</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">per_example_gradients</span><span class="p">(</span><span class="n">loss_fn</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">batch</span><span class="p">)</span>
        <span class="n">clipped</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sanitizer</span><span class="p">.</span><span class="nf">clip_per_example</span><span class="p">(</span><span class="n">per_ex_grads</span><span class="p">)</span>
        <span class="n">noisy_grad</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">sanitizer</span><span class="p">.</span><span class="nf">add_noise_to_batch_mean</span><span class="p">(</span><span class="n">clipped</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">accountant</span><span class="p">.</span><span class="nf">accumulate_privacy_spending</span><span class="p">(</span>
            <span class="n">batch_size</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">batch</span><span class="p">),</span>
            <span class="n">noise_sigma</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">sanitizer</span><span class="p">.</span><span class="n">sigma</span><span class="p">,</span>
            <span class="n">sampling_prob</span><span class="o">=</span><span class="n">sampling_prob</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">p</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">lr</span> <span class="o">*</span> <span class="n">g</span> <span class="k">for</span> <span class="n">p</span><span class="p">,</span> <span class="n">g</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">noisy_grad</span><span class="p">)]</span>


<span class="c1"># ------------------------------- Training Loop -------------------------------
</span>
<span class="k">def</span> <span class="nf">dp_train</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">init_params</span><span class="p">,</span> <span class="n">loss_fn</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span>
             <span class="n">lr</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span> <span class="n">clipping_C</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">noise_sigma</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span>
             <span class="n">batch_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">delta</span><span class="o">=</span><span class="mf">1e-5</span><span class="p">,</span> <span class="n">eps_budget</span><span class="o">=</span><span class="mf">8.0</span><span class="p">):</span>
    <span class="n">N</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
    <span class="n">sampling_prob</span> <span class="o">=</span> <span class="n">batch_size</span> <span class="o">/</span> <span class="n">N</span>
    <span class="n">accountant</span> <span class="o">=</span> <span class="nc">PrivacyAccountant</span><span class="p">(</span><span class="n">eps_budget</span><span class="o">=</span><span class="n">eps_budget</span><span class="p">,</span> <span class="n">delta</span><span class="o">=</span><span class="n">delta</span><span class="p">)</span>
    <span class="n">sanitizer</span> <span class="o">=</span> <span class="nc">Sanitizer</span><span class="p">(</span><span class="n">clipping_C</span><span class="o">=</span><span class="n">clipping_C</span><span class="p">,</span> <span class="n">noise_sigma</span><span class="o">=</span><span class="n">noise_sigma</span><span class="p">)</span>
    <span class="n">opt</span> <span class="o">=</span> <span class="nc">DPSGDOptimizer</span><span class="p">(</span><span class="n">accountant</span><span class="p">,</span> <span class="n">sanitizer</span><span class="p">,</span> <span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">)</span>

    <span class="kn">import</span> <span class="n">random</span>
    <span class="n">params</span> <span class="o">=</span> <span class="n">init_params</span><span class="p">[:]</span>

    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
        <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">accountant</span><span class="p">.</span><span class="nf">within_limit</span><span class="p">():</span>
                <span class="k">break</span>
            <span class="n">batch</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">batch_size</span><span class="p">]</span>
            <span class="n">params</span> <span class="o">=</span> <span class="n">opt</span><span class="p">.</span><span class="nf">step</span><span class="p">(</span><span class="n">loss_fn</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">sampling_prob</span><span class="p">)</span>

        <span class="n">eps</span><span class="p">,</span> <span class="n">delt</span> <span class="o">=</span> <span class="n">accountant</span><span class="p">.</span><span class="nf">get_spent_privacy</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">] θ=</span><span class="si">{</span><span class="n">params</span><span class="si">}</span><span class="s">  |  privacy spent ε≈</span><span class="si">{</span><span class="n">eps</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="s">, δ=</span><span class="si">{</span><span class="n">delt</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">accountant</span><span class="p">.</span><span class="nf">within_limit</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopping early: privacy budget exhausted.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">params</span><span class="p">,</span> <span class="n">accountant</span><span class="p">.</span><span class="nf">get_spent_privacy</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure> </details> <hr/> <blockquote> <p>Algorithm 1 becomes a working loop — each step clips, adds noise, and updates the model, while a privacy accountant keeps score of (ε, δ).<br/> When the budget runs out, training stops — your model learns <em>from the crowd, not the individuals</em>.</p> </blockquote> <hr/> <h2 id="does-privacy-hurt-accuracyresults">Does Privacy Hurt Accuracy?(Results)</h2> <p>After building our differentially private SGD system, it’s time to see <strong>how well it actually works</strong>.<br/> The experiments follow the original paper setup — evaluating <strong>the moments accountant</strong>, and testing on <strong>MNIST</strong> and <strong>CIFAR-10</strong>.</p> <hr/> <h3 id="applying-the-moments-accountant">Applying the Moments Accountant</h3> <p>The <strong>moments accountant</strong> gives us a much <strong>tighter privacy bound</strong> than the old “strong composition theorem”.<br/> Instead of overspending the privacy budget too quickly, it keeps the noise–privacy tradeoff well balanced.</p> <p>Here’s the key idea:</p> <blockquote> <p>The overall privacy loss $(\varepsilon, \delta)$ depends on<br/> the sampling rate $q = L/N$, the number of steps $T = E/q$,<br/> and the noise scale $\sigma$.</p> </blockquote> <p>When using the same training settings $(q = 0.01, σ = 4, δ = 10⁻⁵)$<br/> we can compare the two accounting methods directly.</p> <figure> <img src="/dp_sgd_blog/assets/img/moments_vs_composition.png" alt="Privacy accountant vs strong composition" width="480"/> <figcaption><strong>Figure 2.</strong> The ε-value as a function of training epochs, comparing the strong composition theorem and the moments accountant. The latter achieves much tighter bounds.</figcaption> </figure> <p>Using the moments accountant, we achieve roughly<br/> <strong>(2.55, 1e−5)-differential privacy</strong>,<br/> while the old method only achieves around <strong>(24.22, 1e−5)</strong> —<br/> a dramatic improvement in privacy without hurting training.</p> <hr/> <h3 id="mnist-results-small-noise-big-insights">MNIST Results: Small Noise, Big Insights</h3> <p>Before diving into the results, let’s quickly talk about the dataset we’re using — MNIST.</p> <p>MNIST is like the “Hello World” of machine learning. It’s a collection of 70,000 grayscale images of handwritten digits (0 through 9), each sized 28x28 pixels. It’s super popular for testing image classification models, especially when experimenting with new techniques like Differential Privacy. We train a model to classify these digits, and then see how well it performs under different levels of noise — a key ingredient in privacy-preserving training.</p> <p><img src="/dp_sgd_blog/assets/img/MNIST.jpg" alt="MNIST"/></p> <p>We trained models on MNIST using different noise levels while keeping other hyperparameters fixed. Below are training and testing accuracy plots for three noise scales:</p> <figure> <img src="/dp_sgd_blog/assets/img/result1.jpg" alt="Accuracy over epochs for different noise levels on MNIST" width="800"/> <figcaption><strong>Figure 3.</strong> Accuracy over epochs for different noise levels on MNIST (Large, Medium, Small). Each model uses 60D PCA, 1000 hidden units, and clip threshold 4.</figcaption> </figure> <p>Key takeaways:</p> <ul> <li><strong>Small noise</strong> gives the best accuracy — almost non-private level!</li> <li>As noise increases, accuracy drops slightly, but not catastrophically.</li> <li>The model still generalizes well under moderate noise.</li> </ul> <hr/> <h3 id="privacy-accuracy-tradeoff">Privacy-Accuracy Tradeoff</h3> <p>To analyze how privacy parameters directly affect accuracy, we varied ε (epsilon) while fixing δ (delta). Each line in the plot below represents a different (ε, δ) pair:</p> <figure> <img src="/dp_sgd_blog/assets/img/result2.jpg" alt="Accuracy vs epsilon on MNIST for various delta values." width="480"/> <figcaption><strong>Figure 4.</strong> Accuracy vs epsilon on MNIST for various delta values.</figcaption> </figure> <p>What’s happening here:</p> <ul> <li>Smaller epsilon = stronger privacy = slightly lower accuracy.</li> <li>But even with ε=1 and δ=1e-5, the drop is tolerable.</li> <li>There’s a clear “diminishing returns” zone — cranking up ε too high doesn’t boost accuracy much more.</li> </ul> <hr/> <h3 id="what-happens-when-we-tweak-one-hyperparameter">What Happens When We Tweak One Hyperparameter?</h3> <p>To see how robust the model is, we varied each parameter individually — like projection dimension, hidden units, lot size, etc. This gives a sense of which knobs matter most.</p> <figure> <img src="/dp_sgd_blog/assets/img/result3.jpg" alt="MNIST accuracy when one parameter varies and others stay at reference values." width="520"/> <figcaption><strong>Figure 5.</strong> MNIST accuracy when one parameter varies and others stay at reference values.</figcaption> </figure> <ul> <li><strong>Projection Dimension</strong>: Accuracy is best around 60 dimensions (PCA). Too low or no PCA hurts generalization.</li> <li><strong>Hidden Units</strong>: More units help until about 1000–1200; after that, gains plateau.</li> <li><strong>Lot Size</strong>: There’s a sweet spot near 600.</li> <li><strong>Learning Rate</strong>: 0.05 seems optimal — too high and things crash.</li> <li><strong>Clipping Norm</strong>: Between 4–6 is stable.</li> <li><strong>Noise Level</strong>: Moderate noise still yields strong results!</li> </ul> <hr/> <h3 id="cifar-10-results-what-about-real-images">CIFAR-10 Results: What About Real Images?</h3> <p>MNIST is nice, but what about a more complex dataset like CIFAR-10? We use a 2-layer convolutional network and vary the noise level ($ε$ = 2, 4, 8). Here’s what we get:</p> <figure> <img src="/dp_sgd_blog/assets/img/result4.jpg" alt="CIFAR-10 accuracy under different noise levels with lot size=2000 or 4000." width="520"/> <figcaption><strong>Figure 6.</strong> CIFAR-10 accuracy under different noise levels with lot size = 2000 or 4000.</figcaption> </figure> <ul> <li>With increasing $ε$ (weaker privacy), accuracy improves: from <strong>67% → 70% → 73%</strong>.</li> <li>Compared to state-of-the-art non-private models (~86%), we lose performance — but it’s still <strong>remarkably good</strong> for a DP-trained model!</li> </ul> <hr/> <h3 id="does-privacy-kill-accuracy">Does Privacy Kill Accuracy?</h3> <p>I don’t think it’s true.</p> <ul> <li><strong>Smart tuning</strong> (like PCA, optimal clip norm, lot size) helps a lot.</li> <li>With <strong>moderate noise</strong>, you can get surprisingly strong performance.</li> <li>Even on real-world datasets like CIFAR-10, the tradeoff is manageable.</li> </ul> <p>If you want both privacy AND performance, <strong>you don’t have to choose</strong></p> <hr/> <h2 id="who-else-is-thinking-about-privacy">Who Else Is Thinking About Privacy?</h2> <p>Let’s be real! privacy in machine learning isn’t exactly new. Since the late 90s, researchers have been scratching their heads about how to learn useful stuff from data without leaking personal info. But the ways people have tackled this vary a lot. Depending on what kind of model they’re using, how the learning is done, and how privacy is guaranteed.</p> <h3 id="privacy-guarantees">Privacy Guarantees</h3> <p>Early privacy-preserving methods used Secure Function Evaluation (SFE) and Multi-Party Computation (MPC). These split the data between parties and compute the result together while keeping everyone’s input secret. Cool, but not really applicable here—we assume all data is held centrally, and we care about what leaks from the trained model.</p> <p>Another classic idea is k-anonymity, where data is generalized or suppressed (like saying someone was “born in the 90s” instead of giving their birthday). Unfortunately, this breaks down when dealing with high-dimensional data like images.</p> <p>Instead, most recent work—including ours—leans on Differential Privacy (DP). The idea is to inject carefully calibrated noise into the training process so that it’s hard to tell whether any particular person’s data was used. Techniques like the moments accountant and Rényi DP help track how much “privacy budget” we’re spending during training.</p> <h3 id="learning-algorithms-and-training-techniques">Learning Algorithms and Training Techniques</h3> <p>Most DP work tries to solve convex optimization problems—think logistic regression or SVMs—where the math is easier and DP guarantees are cleaner. But training deep neural networks is non-convex and trickier. This paper pushes forward by applying DP-SGD (stochastic gradient descent with differential privacy) to deep models, even if the theory is messier.</p> <h3 id="model-classes">Model Classes</h3> <p>Other researchers have also tackled DP learning:</p> <p><strong>Netflix Prize (McSherry &amp; Mironov):</strong> The first full-stack DP recommender system using Gaussian noise on sufficient statistics. But their problem had cleaner structure than deep learning.</p> <p><strong>Distributed DP (Shokri &amp; Shmatikov):</strong> Each user trains on their own data and sends noisy gradients to a central server. But privacy loss per parameter can easily exceed thousands—yikes.</p> <p><strong>Autoencoders (Phan et al.):</strong> Recent work adds DP constraints to the loss functions of autoencoders.</p> <p>Our approach differs by applying end-to-end DP training using standard neural networks and SGD, without assuming any special structure in the data or model.</p> <hr/> <h2 id="conclusions">Conclusions</h2> <p>We trained deep neural networks <em>with strong privacy guarantees</em>—and guess what? The performance is still pretty solid.</p> <ul> <li>On <strong>MNIST</strong>, our model hit <strong>97%</strong> accuracy.</li> <li>On <strong>CIFAR-10</strong>, we got <strong>73%</strong>—not bad at all considering we’re adding noise!</li> </ul> <p>All of this while ensuring <strong>$(ε = 8, δ = 10⁻⁵)$</strong> differential privacy. We’re using a private version of <strong>stochastic gradient descent (SGD)</strong> that plugs right into <strong>TensorFlow</strong>. So it’s easy to work with and pretty versatile.</p> <h3 id="keypoint">Keypoint</h3> <p>A big part of what made this work is something called the Moments Accountant. Think of it as a super-smart privacy tracker that knows exactly how much of your privacy budget is being used during training. It’s way more accurate than traditional methods, and it gives us tight control over how noisy we need to be.</p> <blockquote> <p><strong>Privacy doesn’t have to come at the cost of usefulness.</strong> With the right tools and some clever training tricks, we can get the best of both worlds: solid performance and user privacy.</p> </blockquote> <hr/> <h2 id="references">References</h2> <details> <summary>Show References</summary> 1. Abadi et al., *Deep Learning with Differential Privacy* [https://arxiv.org/abs/1607.00133](https://arxiv.org/abs/1607.00133) 2. TensorFlow Privacy: [https://github.com/tensorflow/privacy](https://github.com/tensorflow/privacy) 3. McSherry, F. &amp; Mironov, I. *Differentially Private Recommender Systems: Building Privacy into the Netflix Prize Contenders.* In *Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD’09)*, pp. 627–636. ACM, 2009. 4. Dwork, C. &amp; Roth, A. *The Algorithmic Foundations of Differential Privacy.* *Foundations and Trends in Theoretical Computer Science.* Now Publishers, 2014. </details> <hr/>]]></content><author><name>YAN SHIYU</name></author><category term="Differential Privacy"/><category term="DP-SGD"/><category term="Deep Learning"/><summary type="html"><![CDATA[How privacy-preserving deep learning (DP-SGD) works in practice.]]></summary></entry><entry><title type="html">Teaching AI to Whisper, Not Shout</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/dp/" rel="alternate" type="text/html" title="Teaching AI to Whisper, Not Shout"/><published>2025-10-26T00:00:00+00:00</published><updated>2025-10-26T00:00:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2025/dp</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/dp/"><![CDATA[<p><strong>Subtitle:</strong> How Privacy-Preserving Learning Works Behind the Scenes</p> <p>Imagine training an AI model on millions of personal medical records. We want the model to learn general patterns — not memorize individuals. That’s exactly what <em>Deep Learning with Differential Privacy</em> achieves.</p> <h2>1. The Problem: When AI Remembers Too Much</h2> <p>Traditional models can accidentally “leak” private data. For example, a language model might memorize a phone number or name from its training set. That’s where differential privacy comes in.</p> <h2>2. How DP-SGD Works</h2> <p>DP-SGD makes small but critical changes to the training process:</p> <ul> <li><strong>Gradient clipping:</strong> Limits how much influence any single example can have.</li> <li><strong>Noise addition:</strong> Adds Gaussian noise to gradients to hide individuals’ effects.</li> <li><strong>Privacy accounting:</strong> Tracks the total privacy budget (ε, δ) over iterations.</li> </ul> <h2>3. The Impact</h2> <p>This 2016 work by Abadi et al. showed that deep models could be trained privately without losing much accuracy — a milestone for modern AI ethics and security.</p> <h2>4. Takeaway</h2> <p>In short, <em>teaching AI to whisper</em> means giving it just enough voice to learn patterns, but not enough to reveal secrets.</p> <p><small>Paper: <a href="https://arxiv.org/abs/1607.00133" target="_blank">Deep Learning with Differential Privacy</a></small></p>]]></content><author><name></name></author><category term="Differential Privacy"/><category term="DP-SGD"/><category term="Deep Learning"/><summary type="html"><![CDATA[Subtitle: How Privacy-Preserving Learning Works Behind the Scenes]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2025/plotly</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/photo-gallery</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/tabs</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="caf2bc99-bd9f-4bdb-a1e7-ce774dc943d4" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="caf2bc99-bd9f-4bdb-a1e7-ce774dc943d4" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="97d76b36-9491-42c0-87bf-c532c204dccb" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="97d76b36-9491-42c0-87bf-c532c204dccb" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="a8978890-c7c0-4452-ade7-2e4cc999b48f" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="a8978890-c7c0-4452-ade7-2e4cc999b48f" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/typograms</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/post-citation</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/pseudocode</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://siahshiahy.github.io/dp_sgd_blog/blog/2024/code-diff</id><content type="html" xml:base="https://siahshiahy.github.io/dp_sgd_blog/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry></feed>